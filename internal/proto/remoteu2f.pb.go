// Code generated by protoc-gen-go.
// source: remoteu2f.proto
// DO NOT EDIT!

/*
Package remoteu2f is a generated protocol buffer package.

It is generated from these files:
	remoteu2f.proto

It has these top-level messages:
	Void
	Url
	Prepare
	Response
*/
package remoteu2f

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Request type, used only for selecting the web page template (no
// functional behaviour difference from an RPC perspective).
type Prepare_RType int32

const (
	Prepare_UNKNOWN      Prepare_RType = 0
	Prepare_REGISTER     Prepare_RType = 1
	Prepare_AUTHENTICATE Prepare_RType = 2
)

var Prepare_RType_name = map[int32]string{
	0: "UNKNOWN",
	1: "REGISTER",
	2: "AUTHENTICATE",
}
var Prepare_RType_value = map[string]int32{
	"UNKNOWN":      0,
	"REGISTER":     1,
	"AUTHENTICATE": 2,
}

func (x Prepare_RType) String() string {
	return proto.EnumName(Prepare_RType_name, int32(x))
}

// Generic empty message, for RPCs that don't need one.
type Void struct {
}

func (m *Void) Reset()         { *m = Void{} }
func (m *Void) String() string { return proto.CompactTextString(m) }
func (*Void) ProtoMessage()    {}

// Generic message containing a request key and URL.
type Url struct {
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Url string `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
}

func (m *Url) Reset()         { *m = Url{} }
func (m *Url) String() string { return proto.CompactTextString(m) }
func (*Url) ProtoMessage()    {}

// Prepare an operation.
type Prepare struct {
	// Generic json content to return.
	Json []byte `protobuf:"bytes,1,opt,name=json,proto3" json:"json,omitempty"`
	// User-readable message to show on the web page.
	Msg   string        `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
	Rtype Prepare_RType `protobuf:"varint,3,opt,name=rtype,enum=remoteu2f.Prepare_RType" json:"rtype,omitempty"`
}

func (m *Prepare) Reset()         { *m = Prepare{} }
func (m *Prepare) String() string { return proto.CompactTextString(m) }
func (*Prepare) ProtoMessage()    {}

// Operation response.
type Response struct {
	Json []byte `protobuf:"bytes,1,opt,name=json,proto3" json:"json,omitempty"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}

func init() {
	proto.RegisterEnum("remoteu2f.Prepare_RType", Prepare_RType_name, Prepare_RType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for RemoteU2F service

type RemoteU2FClient interface {
	PrepareOp(ctx context.Context, in *Prepare, opts ...grpc.CallOption) (*Url, error)
	GetOpResponse(ctx context.Context, in *Url, opts ...grpc.CallOption) (*Response, error)
	GetAppID(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Url, error)
}

type remoteU2FClient struct {
	cc *grpc.ClientConn
}

func NewRemoteU2FClient(cc *grpc.ClientConn) RemoteU2FClient {
	return &remoteU2FClient{cc}
}

func (c *remoteU2FClient) PrepareOp(ctx context.Context, in *Prepare, opts ...grpc.CallOption) (*Url, error) {
	out := new(Url)
	err := grpc.Invoke(ctx, "/remoteu2f.RemoteU2F/PrepareOp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteU2FClient) GetOpResponse(ctx context.Context, in *Url, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/remoteu2f.RemoteU2F/GetOpResponse", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteU2FClient) GetAppID(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Url, error) {
	out := new(Url)
	err := grpc.Invoke(ctx, "/remoteu2f.RemoteU2F/GetAppID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RemoteU2F service

type RemoteU2FServer interface {
	PrepareOp(context.Context, *Prepare) (*Url, error)
	GetOpResponse(context.Context, *Url) (*Response, error)
	GetAppID(context.Context, *Void) (*Url, error)
}

func RegisterRemoteU2FServer(s *grpc.Server, srv RemoteU2FServer) {
	s.RegisterService(&_RemoteU2F_serviceDesc, srv)
}

func _RemoteU2F_PrepareOp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Prepare)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RemoteU2FServer).PrepareOp(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _RemoteU2F_GetOpResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Url)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RemoteU2FServer).GetOpResponse(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _RemoteU2F_GetAppID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RemoteU2FServer).GetAppID(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _RemoteU2F_serviceDesc = grpc.ServiceDesc{
	ServiceName: "remoteu2f.RemoteU2F",
	HandlerType: (*RemoteU2FServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PrepareOp",
			Handler:    _RemoteU2F_PrepareOp_Handler,
		},
		{
			MethodName: "GetOpResponse",
			Handler:    _RemoteU2F_GetOpResponse_Handler,
		},
		{
			MethodName: "GetAppID",
			Handler:    _RemoteU2F_GetAppID_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
